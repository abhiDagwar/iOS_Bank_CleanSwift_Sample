//
//  HomePresenter.swift
//  Test_Bank_iOS
//
//  Created by Abhishek D on 13/10/19.
//  Copyright (c) 2019 Abhishek D. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomePresentationLogic
{
    func presentUserDetails(response: Home.GetAccountHolderDetails.Response)
    func presentAccountStatementList(response: Home.GetAccountStatementList.Response)
    func presentAccountStatementList(with error: Home.GetAccountStatementList.Error)
    func presentLogout()
}

/**
 This class get the Response from the Interactor, format it into a ViewModel and pass the result back to the ViewController. Presenter will be in charge of the presentation logic. This component decides how the data will be presented to the user.
 
 Usage:
    - **User Details** - Map user details to the view model.
    - **Statement List** - Map user account statement list to the view model.
 */
class HomePresenter: HomePresentationLogic
{
    weak var viewController: HomeDisplayLogic?

    /**
     This function map the user details with the viewModel.
     
     - Parameters:
        - user: User details parse response from network.
     
     - Returns: mapped user details from viewModel.
     */
    private func mapUserToViewModel(user: UserAccount) -> Home.GetAccountHolderDetails.ViewModel {
        let accountHolderName = user.name
        let accountInfo = user.bankAccount + "/" + user.agency
        let accountBalance = user.balance
        
        return Home.GetAccountHolderDetails.ViewModel(name: accountHolderName, bankAccountInfo: accountInfo, balance: accountBalance)
    }

    private func handlePresentFetchAccountStementList(statementList: [StatementList])
    {
        let accountStatementList = formatAccountStatementList(statementList: statementList)
        let viewModel = Home.GetAccountStatementList.ViewModel(success: true, statementList: accountStatementList)
        viewController?.displayAccountStatementList(viewModel: viewModel)
    }
    
    /**
     This function map the user account statement details with the viewModel.
     
     - Parameters:
     - user: User account statement details parse response from network.
     
     - Returns: mapped user account statement list from viewModel.
     */
    private func formatAccountStatementList(statementList: [StatementList]?) -> [Home.GetAccountStatementList.ViewModel.StatementList]
    {
        var accountStatementList: [Home.GetAccountStatementList.ViewModel.StatementList] = []
        if let statementList = statementList {
            for statement in statementList {
                let title = statement.title
                let desc = statement.desc
                let date = statement.date
                let balanceValue = statement.value
                let accountStatement = Home.GetAccountStatementList.ViewModel.StatementList(title: title, desc: desc, date: date, value: balanceValue)
                accountStatementList.append(accountStatement)
            }
        }
        return accountStatementList
    }
}

// MARK: Extension
extension HomePresenter {
    
    // MARK: Display User Account Info
    func presentUserDetails(response: Home.GetAccountHolderDetails.Response)
    {
        let user = response.userAccountDetails
        let viewModel = mapUserToViewModel(user: user)
        viewController?.displayUserDetails(viewModel: viewModel)
    }
    
    // MARK: Account Statement List
    func presentAccountStatementList(response: Home.GetAccountStatementList.Response)
    {
        if let statementList = response.accountStatement {
            if !statementList.isEmpty {
                handlePresentFetchAccountStementList(statementList: statementList)
            }
        }
    }
    
    func presentAccountStatementList(with error: Home.GetAccountStatementList.Error) {
        let errorModel = Home.GetAccountStatementList.ErrorModel(success: error.success, errorResponse: error.errorResponse)
        viewController?.displayError(errorModel: errorModel)
    }
    
    // MARK: Logout
    func presentLogout()
    {
        viewController?.displayLogout()
    }
}
